@page "/"
@using BookStores.Models
@using BookStores.Services
@inject HttpClient _httpClient

<div class="col-12">
    <h3><b>Authors</b></h3>
    <hr />
    @if (AuthorList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
       <TelerikGrid Data="AuthorList"
                    Pageable="true"
                    Sortable="true"
                    Resizable="true"
                    Groupable="true"
                    FilterMode="GridFilterMode.FilterRow"
                    OnCreate="CreateAuthor"
                    OnUpdate="UpdateAuthor"
                    OnDelete="DeleteAuthor">
           <GridToolBar>
               <GridCommandButton Command="Add" Icon="@IconName.Plus">Add</GridCommandButton>
           </GridToolBar>
           <GridColumns>
               <GridColumn Field="@nameof(Author.FirstName)" Title="First Name"></GridColumn>
               <GridColumn Field="@nameof(Author.LastName)" Title="Last Name"></GridColumn>
               <GridColumn Field="@nameof(Author.City)" Title="City"></GridColumn>
               <GridColumn Field="@nameof(Author.State)" Title="State"></GridColumn>
               <GridCommandColumn>
                   <GridCommandButton Command="Save" Icon="@IconName.Save">Save</GridCommandButton>
                   <GridCommandButton Command="Edit" Icon="@IconName.Edit">Edit</GridCommandButton>
                   <GridCommandButton Command="Delete" Icon="@IconName.Delete">Delete</GridCommandButton>
                   <GridCommandButton Command="Cancel" Icon="@IconName.Cancel">Cancel</GridCommandButton>
               </GridCommandColumn>
           </GridColumns>
           
       </TelerikGrid> 
    }
</div>

@code {

    //properties

    public Author Author { get; set; }
    public List<Author> AuthorList { get; set; }

    public List<BookType> BookTypes = new List<BookType>();
    public List<City> Cities { get; set; } = new List<City>();
    public List<Subscription> Subscriptions { get; set; } = new List<Subscription>();

    public string[] States { get; set; } =
        new string[] { "NY", "CA", "IL", "AZ", "PA", "OH", "NC", "IN", "WA", "CO", "TX", "FL" };

    public string TextBoxValue { get; set; }
    public string DropDownListValue { get; set; }

    Telerik.Blazor.StringFilterOperator StringFilterOperator { get; set; } = StringFilterOperator.Contains;

    public List<int> SelectedBookTypeIds { get; set; } = new List<int>();

    public string Message { get; set; }
    public int Count { get; set; }

    public bool SelectAll
    {
        get
        {
            return Subscriptions.All(sub => sub.Selected);
        }
        set
        {
            Subscriptions.ForEach(sub => sub.Selected = value);
        }
    }

    public bool SelectAllInderminate
    {
        get
        {
            return !SelectAll && Subscriptions.Any(sub => sub.Selected);
        }
    }

    private void MultiSelectEventHandler(object value)
    {
        List<int> selectedIds = (List<int>)value;
        SelectedBookTypeIds = selectedIds;

        if (selectedIds.Count() > 3)
            Message = "more than 3 book types have been selected.";
        else
            Message = "";
    }

    private bool SetTextBoxAccess()
    {
        return true;
    }

    private void TextBoxEventHandler(string value)
    {
        Author.FirstName = value;
        TextBoxValue = value;
    }

    private void DropDownListEventHandler(object value)
    {
        DropDownListValue = (string)value;
        //string selectedCity = Cities.Where(ct => ct.Id == DropDownListValue).FirstOrDefault().CityName;
        Author.State = GetStateFromCity(DropDownListValue);
        //author.City = selectedCity;
    }

    protected override async Task OnInitializedAsync()
    {
        Author = new Author();
        //authorList = new List<Author>();
        await LoadAuthors();

        //loading cities
        LoadCities();

        //loading booktypes
        //LoadBookTypes();

        //loading subscriptions
        LoadSubscriptions();

        await base.OnInitializedAsync();
    }

    private async Task LoadAuthors()
    {
        AuthorList = await _httpClient.GetFromJsonAsync<List<Author>>("authors/getauthors");

        if (AuthorList != null)
            AuthorList = AuthorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private void LoadCities()
    {
        Cities.Add(new City { Id = "1", CityName = "New York City" });
        Cities.Add(new City { Id = "2", CityName = "Los Angeles" });
        Cities.Add(new City { Id = "3", CityName = "Chicago" });
        Cities.Add(new City { Id = "4", CityName = "Houston" });
        Cities.Add(new City { Id = "5", CityName = "Phoenix" });
        Cities.Add(new City { Id = "6", CityName = "Philadelphia" });
        Cities.Add(new City { Id = "7", CityName = "San Antonio" });
        Cities.Add(new City { Id = "8", CityName = "San Diego" });
        Cities.Add(new City { Id = "9", CityName = "Dallas" });
        Cities.Add(new City { Id = "10", CityName = "San Jose" });
        Cities.Add(new City { Id = "11", CityName = "Austin" });
        Cities.Add(new City { Id = "12", CityName = "Jacksonville" });
        Cities.Add(new City { Id = "13", CityName = "Fort Worth" });
        Cities.Add(new City { Id = "14", CityName = "Columbus" });
        Cities.Add(new City { Id = "15", CityName = "San Francisco" });
        Cities.Add(new City { Id = "16", CityName = "Charlotte" });
        Cities.Add(new City { Id = "17", CityName = "Indianapolis" });
        Cities.Add(new City { Id = "18", CityName = "Seattle" });
        Cities.Add(new City { Id = "19", CityName = "Denver" });
    }

    private void LoadBookTypes(MultiSelectReadEventArgs multiSelectReadEventArgs)
    {
        Count++;

        //loading book types
        BookTypes.Add(new BookType { Id = 1, Type = "Adventure" });
        BookTypes.Add(new BookType { Id = 2, Type = "Romance" });
        BookTypes.Add(new BookType { Id = 3, Type = "Mystery" });
        BookTypes.Add(new BookType { Id = 4, Type = "Horror" });
        BookTypes.Add(new BookType { Id = 5, Type = "Thriller" });
        BookTypes.Add(new BookType { Id = 6, Type = "Science Fiction" });
        BookTypes.Add(new BookType { Id = 7, Type = "Cooking" });
        BookTypes.Add(new BookType { Id = 8, Type = "Development" });
        BookTypes.Add(new BookType { Id = 9, Type = "Motivational" });
    }

    private void LoadSubscriptions()
    {
        Subscriptions.Add(new Subscription { Id = 1, SubscriptionName = "Gold" });
        Subscriptions.Add(new Subscription { Id = 2, SubscriptionName = "Silver" });
        Subscriptions.Add(new Subscription { Id = 3, SubscriptionName = "Bronze" });
    }

    private async Task CreateAuthor(GridCommandEventArgs gridCommandEventArgs)
    {
        Author = gridCommandEventArgs.Item as Author;
        if (Author.AuthorId == 0)
            await _httpClient.PostAsJsonAsync<Author>("authors/createauthor", Author);

        await LoadAuthors();

        Author = new Author();
    }

    private async Task UpdateAuthor(GridCommandEventArgs gridCommandEventArgs)
    {
        Author = gridCommandEventArgs.Item as Author;
        if (Author.AuthorId != 0)
            await _httpClient.PutAsJsonAsync<Author>("authors/UpdateAuthor" + Author.AuthorId, Author);

        await LoadAuthors();

        Author = new Author();
    }

    private async Task DeleteAuthor(GridCommandEventArgs gridCommandEventArgs)
    {

        Author = gridCommandEventArgs.Item as Author;
        await _httpClient.DeleteAsync("authors/DeleteAuthor/"+ Author.AuthorId);
        await LoadAuthors();
    }

    private string GetStateFromCity(string city)
    {
        if (city == "New York City")
            return "NY";
        if (city == "Los Angeles" || city == "San Diego" || city == "San Jose" || city == "San Francisco")
            return "CA";
        if (city == "San Antonio" || city == "Houston" || city == "Dallas" || city == "Austin" || city == "Fort Worth")
            return "TX";
        if (city == "Chicago")
            return "IL";
        if (city == "Phoenix")
            return "AZ";
        if (city == "Philadelphia")
            return "PA";
        if (city == "Jacksonville")
            return "FL";
        if (city == "Columbus")
            return "OH";
        if (city == "Charlotte")
            return "NC";
        if (city == "Indianapolis")
            return "IN";
        if (city == "Seattle")
            return "WA";
        if (city == "Denver")
            return "CO";

        return "";
    }
}