@page "/books"
@using BookStores.Models
@using BookStores.Services
@using Telerik.DataSource
@inject HttpClient _httpClient

<div class="col-12">
    <h3><b>Books</b></h3>
    <hr />

    @if (BookList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikButton @onclick="SortBySales"> Sort By Sales</TelerikButton>
        <br /><br />
        <TelerikGrid Data="BookList"
                     Resizable="true"
                     Reorderable="true"
                     Pageable="true"
                     PageSize="@UserPageSize"
                     @bind-Page="@CurrentPage"
                     Sortable="true"
                     @ref="BooksGrid">
            <GridColumns>
                <GridColumn Field="@nameof(Book.Title)"></GridColumn>
                <GridColumn Field="@nameof(Book.AuthorName)" Title="Author Name"></GridColumn>
                <GridColumn Field="@nameof(Book.Type)"></GridColumn>
                <GridColumn Field="@nameof(Book.Price)">
                    <Template>
                        @((context as Book).Price.ToString("C2"))
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Book.Sales)">
                    <Template>
                        @((context as Book).Sales.ToString("N0"))
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    }
    <br /><br />
</div>

@code {

    //properties

    public Book Book { get; set; }
    public List<Book> BookList { get; set; }
    public int UserPageSize { get; set; }
    public int CurrentPage { get; set; }

    public TelerikGrid<Book> BooksGrid { get; set; }

    private async Task SortBySales()
    {
        SortDescriptor sortDescriptor = new SortDescriptor();
        sortDescriptor.Member = "Sales";
        sortDescriptor.SortDirection = ListSortDirection.Descending;

        List<SortDescriptor> sortDescriptors = new List<SortDescriptor>();
        sortDescriptors.Add(sortDescriptor);

        GridState<Book> gridState = new GridState<Book>();
        gridState.SortDescriptors = sortDescriptors;

        await BooksGrid.SetState(gridState);
    }

    //Component Events
    protected override async Task OnInitializedAsync()
    {
        Book = new Book();
        BookList = await GetBooks();

        UserPageSize = await GetUserPageSize();

        await base.OnInitializedAsync();
    }

    private async Task<List<Book>> GetBooks()
    {
        List<Book> BookList = await _httpClient.GetFromJsonAsync<List<Book>>("Books/getBooks");

        if (BookList != null)
            BookList = BookList.OrderByDescending(auth => auth.BookId).ToList();

        return BookList;
    }

    private async Task CreateBook()
    {
        if (Book.BookId == 0)
            await _httpClient.PostAsJsonAsync<Book>("Books/createBook", Book);

        BookList = await GetBooks();
    }

    private async Task UpdateBook()
    {
        if (Book.BookId != 0)
            await _httpClient.PutAsJsonAsync<Book>("Books/UpdateBook/" + Book.BookId, Book);

        BookList = await GetBooks();
    }

    private async Task DeleteBook()
    {
        await _httpClient.DeleteAsync("Books/DeleteBook/" + Book.BookId);

        BookList = await GetBooks();
    }

    private async Task<int> GetUserPageSize()
    {
        return await Task.FromResult<int>(10);
    }
}