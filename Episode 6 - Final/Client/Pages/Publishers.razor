@page "/publishers"
@using BookStores.Services
@using BookStores.Models
@inject IBookStoresService<Publisher> bookStoresService

<br />
<div class="col-12">

    @if (publisherList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikListView Data="publisherList"
                         Pageable="true"
                         PageSize="5"
                         OnUpdate="@UpdatePublisher"
                         OnCreate="@CreatePublisher"
                         OnDelete="@DeletePublisher">
            <HeaderTemplate>                
                &nbsp;<ListViewCommandButton Command="Add">Add</ListViewCommandButton>                
            </HeaderTemplate>
            <Template>
                <div class="card">
                    <div class="col-12 row">
                        <div class="col-8">
                            <br />
                            <span style="font-size:x-large">@context.PublisherName</span>
                            <br />
                            <span style="font-size:large">@context.City , @context.State</span>
                            <br />
                        </div>
                        <div class="col-4">
                            <br />
                            <ListViewCommandButton Command="Edit">Edit</ListViewCommandButton>
                            <span> </span>
                            <ListViewCommandButton Command="Delete">Delete</ListViewCommandButton>
                            <br />
                        </div>
                    </div>
                </div>
            </Template>
            <EditTemplate>                
                <TelerikTextBox @bind-Value="@context.PublisherName" Label="PublisherName"></TelerikTextBox>                
                <TelerikTextBox @bind-Value="@context.City" Label="City"></TelerikTextBox>
                <TelerikTextBox @bind-Value="@context.State" Label="State"></TelerikTextBox>
                <br />
                <ListViewCommandButton Command="Save">Save</ListViewCommandButton>
            </EditTemplate>
        </TelerikListView>
    }
</div>

@code {

    public Publisher publisher { get; set; }
    public List<Publisher> publisherList { get; set; }
    public string[] Cities { get; set; }

    protected override void OnInitialized()
    {
        publisher = new Publisher();
        Cities = new string[] { "New York", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville", "Fort Worth", "Columbus", "San Francisco", "Charlotte", "Indianapolis", "Seattle", "Denver", "Washington" };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPublishers();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadPublishers()
    {

        publisherList = await bookStoresService.GetAllAsync("publishers/GetPublishers");

        publisherList = publisherList.OrderByDescending(pub => pub.PubId).ToList();

        StateHasChanged();
    }

    private async Task CreatePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
    {
        var publisher = (Publisher)listViewCommandEventArgs.Item;
        await bookStoresService.SaveAsync("publishers/CreatePublisher", publisher);

        await LoadPublishers();
    }

    private async Task UpdatePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
    {
        var publisher = (Publisher)listViewCommandEventArgs.Item;
        await bookStoresService.UpdateAsync("publishers/UpdatePublisher/", publisher.PubId, publisher);

        await LoadPublishers();
    }

    private async Task DeletePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
    {
        var publisher = (Publisher)listViewCommandEventArgs.Item;
        await bookStoresService.DeleteAsync("publishers/DeletePublisher/", publisher.PubId);

        await LoadPublishers();
    }

}
