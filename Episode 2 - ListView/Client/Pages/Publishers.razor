@page "/publishers"
@using BookStores.Services
@using BookStores.Models
@inject HttpClient _httpClient


<div class="col-12">

    @if (publisherList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikListView Data="publisherList"
                         Pageable="Paging"
                         PageSize="PageSizeOption"
                         PageChanged="PageChangedHandler"
                         OnDelete="DeletePublisher"
                         OnUpdate="UpdatePublisher"
                         OnCreate="CreatePublisher">
            <HeaderTemplate>
                <br />
                <div class="col-12 row">
                    <label style="font-size:large; font-weight:bold">
                        Enable Paging :
                        <TelerikCheckBox @bind-Value="Paging"></TelerikCheckBox>
                    </label>
                </div>
                <div class="col-12 row">
                    <label style="font-size:large; font-weight:bold">
                        Page Size :
                        <TelerikDropDownList Data="PageSizeOptions"
                                             @bind-Value="PageSizeOption"
                                             Class="col-3"></TelerikDropDownList>
                    </label>
                </div>
                <div class="col-12 row">
                    <label style="font-size:large; font-weight:bold">
                        @PageChangedMessage
                    </label>
                </div>
                <div class="col-12 row">
                    <ListViewCommandButton Command="Add" Icon="@IconName.Plus">Add</ListViewCommandButton>
                </div>
                <br />
            </HeaderTemplate>
            <Template Context="publisher">
                <div class="card">
                    <div class="row no-gutters">
                        <div class="col-md-2">
                            <img src=@($"/img/telerik.jpg") class="card-img" alt="...">
                        </div>
                        <div class="col-md-6">
                            <div class="card-body">
                                <h5 class="card-title font-weight-bolder">@publisher.PublisherName</h5>
                                <p class="card-subtitle">@publisher.City , @publisher.State</p>
                                <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <br />
                            <ListViewCommandButton Command="Edit" Icon="@IconName.Edit">Edit</ListViewCommandButton>
                            <ListViewCommandButton Command="Delete" Icon="@IconName.Delete">Delete</ListViewCommandButton>
                        </div>
                    </div>
                </div>
            </Template>
            <EditTemplate Context="publisher">
                <div class="card">
                    <div class="row no-gutters">
                        <div class="col-md-2">
                            <img src=@($"/img/telerik.jpg") class="card-img" alt="...">
                        </div>
                        <div class="col-md-6">
                            <div class="card-body">
                                <TelerikTextBox @bind-Value="publisher.PublisherName"></TelerikTextBox>
                                <TelerikDropDownList Data="Cities" @bind-Value="publisher.City"></TelerikDropDownList>
                                <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <br />
                            <ListViewCommandButton Command="Save" Icon="@IconName.Save">Save</ListViewCommandButton>                            
                        </div>
                    </div>
                </div>
            </EditTemplate>
            <FooterTemplate>
                <strong style="font-size:larger">Total Count : @publisherList.Count()</strong>
            </FooterTemplate>
        </TelerikListView>
    }
</div>

@code {

    public Publisher publisher { get; set; }
    public List<Publisher> publisherList { get; set; } = new List<Publisher>();
    public string[] Cities { get; set; }

    public bool Paging { get; set; } = true;
    public int[] PageSizeOptions { get; set; } = new int[] { 2, 3, 4, 5, 10 };
    public int PageSizeOption { get; set; } = 5;
    public string PageChangedMessage { get; set; }

    //Events
    protected async override Task OnInitializedAsync()
    {
        publisher = new Publisher();
        Cities = new string[] { "Boston", "Washington", "Chicago", "Dallas", "New York City", "Portland", "Naperville", "Nashville" };

        await LoadPublishers();
    }

    private void PageChangedHandler(int currentPageNumber)
    {
        PageChangedMessage = "You are on page : " + currentPageNumber;
    }

    private void ValueChangedHandler(string city, Publisher publisher)
    {
        publisher.State = GetStateFromCity(city);
        publisher.City = city;
    }

    //CRUD Operations
    private async Task LoadPublishers()
    {
        publisherList = await _httpClient.GetFromJsonAsync<List<Publisher>>("publishers/getpublishers");

        if (publisherList != null)
            publisherList = publisherList.OrderByDescending(pub => pub.PubId).ToList();

        publisher = new Publisher();

        StateHasChanged();
    }

    private async Task CreatePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
    {
        var publisher = listViewCommandEventArgs.Item as Publisher;
        await _httpClient.PostAsJsonAsync<Publisher>("publishers/createpublisher", publisher);

        await LoadPublishers();
    }

    private async Task UpdatePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
    {
        var publisher = listViewCommandEventArgs.Item as Publisher;
        await _httpClient.PutAsJsonAsync<Publisher>("publishers/UpdatePublisher/" + publisher.PubId, publisher);

        await LoadPublishers();
    }

    private async Task DeletePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
    {
        var publisher = listViewCommandEventArgs.Item as Publisher;
        await _httpClient.DeleteAsync("publishers/deletepublisher/" + publisher.PubId);

        await LoadPublishers();
    }

    //Other Methods
    private void ClearPublisher()
    {
        publisher = new Publisher();
    }

    private string GetStateFromCity(string city)
    {
        if (city == "New York City")
            return "NY";
        if (city == "Los Angeles" || city == "San Diego" || city == "San Jose" || city == "San Francisco")
            return "CA";
        if (city == "San Antonio" || city == "Houston" || city == "Dallas" || city == "Austin" || city == "Fort Worth")
            return "TX";
        if (city == "Chicago" || city == "Naperville")
            return "IL";
        if (city == "Phoenix")
            return "AZ";
        if (city == "Philadelphia")
            return "PA";
        if (city == "Jacksonville")
            return "FL";
        if (city == "Columbus")
            return "OH";
        if (city == "Charlotte")
            return "NC";
        if (city == "Indianapolis")
            return "IN";
        if (city == "Seattle")
            return "WA";
        if (city == "Denver")
            return "CO";
        if (city == "Boston")
            return "MA";
        if (city == "Washington")
            return "DC";
        if (city == "Washington")
            return "DC";
        if (city == "Portland")
            return "OR";
        if (city == "Nashville")
            return "TN";

        return "";
    }

}
