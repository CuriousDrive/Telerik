    Introduction
    Demo App - Done
    Template, Pagable, PageSize 
    HeaderTemplate & FooterTemplate
    Manual Data Source Operations
        - OnRead Event
        - PageChanged Event
        - You can make custom methods to make filter and sort operations
    EditTemplate 
        - I want to have cascading dropdown list 
        - Enums for Add, Edit , Save, Delete and Cancel
        - CUD Events - OnCreate, OnUpdate and OnDelete
        - OnEdit and OnCancel Events    
    
    -----------------------------------------------------------------------------------------------------
    
    -- taking backup of this before getting started with using Telerik ListView Component

    @if (publisherList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>PublisherName</th>
                    <th>City</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var publisher in publisherList)
                {
                    <tr>
                        <td>@publisher.PublisherName</td>
                        <td>@publisher.City</td>

                    </tr>
                }
            </tbody>
        </table>
    }

    private async Task SavePublisher()
    {
        if (publisher.PubId == 0)
            await bookStoresService.SaveAsync("publishers/createpublisher", publisher);
        else
            await bookStoresService.UpdateAsync("publishers/updatepublisher", publisher.PubId, publisher);

        await LoadPublishers();

        publisher = new Publisher();
    }

    private async Task DeletePublisher(int pubId)
    {
        await bookStoresService.DeleteAsync("publishers/DeletePublisher", pubId);

        await LoadPublishers();
    }

    private void EditPublisher(Publisher argPublisher)
    {
        publisher = argPublisher;
    }

    -----------------------------------------------------------------------------------------------------

    -- this is from when I studied the ListView Component the first time
    <TelerikListView Data="publisherList"
                         Pageable="true"
                         PageSize="5"
                         OnUpdate="UpdatePublisher"
                         OnDelete="DeletePublisher"
                         OnCreate="CreatePublisher"
                         @ref="TheListViewRef">
            <HeaderTemplate>
                <ListViewCommandButton Command="Add">Add</ListViewCommandButton>
            </HeaderTemplate>
            <Template Context="publisher">
                <div class="card">
                    <div class="col-12 row" style="font-size:x-large">
                        @publisher.PublisherName
                    </div>
                    <div class="col-12 row">
                        <div class="col-8" style="font-size:large">
                            @publisher.City, @publisher.State
                        </div>
                        <div class="col-4">
                            <ListViewCommandButton Command="Edit">Edit</ListViewCommandButton>
                            <ListViewCommandButton Command="Delete">Delete</ListViewCommandButton>
                        </div>
                    </div>                    
                </div>                
            </Template>
            <EditTemplate Context="publisher">
                <TelerikTextBox @bind-Value="publisher.PublisherName" PlaceHolder="publisher name"></TelerikTextBox>
                <br />
                <TelerikDropDownList Data="Cities" 
                                     Value="publisher.City"
                                     ValueChanged="@((string value) => OnChangeEventHandler(value, publisher))"></TelerikDropDownList>
                <br />
                <ListViewCommandButton Command="Save">Save</ListViewCommandButton>
            </EditTemplate>
        </TelerikListView>
        

        //Func<string, Publisher> OnChangeEventHandler(string value)

        private void OnChangeEventHandler(string value, Publisher publisher1)
        {
            publisher1.City = value;
            publisher1.State = "TX";
        }

        private void EditPublisher(ListViewCommandEventArgs listViewCommandEventArgs)
        {
            publisher = listViewCommandEventArgs.Item as Publisher;
        }

        private async Task CreatePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
        {
            var publisher = (Publisher)listViewCommandEventArgs.Item;
            await bookStoresService.SaveAsync("publishers/CreatePublisher", publisher);

            await LoadPublishers();
        }

        private async Task UpdatePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
        {
            var publisher = (Publisher)listViewCommandEventArgs.Item;
            await bookStoresService.UpdateAsync("publishers/UpdatePublisher/", publisher.PubId, publisher);

            await LoadPublishers();
        }

        private async Task DeletePublisher(ListViewCommandEventArgs listViewCommandEventArgs)
        {
            var publisher = (Publisher)listViewCommandEventArgs.Item;
            await bookStoresService.DeleteAsync("publishers/DeletePublisher/", publisher.PubId);

            await LoadPublishers();
        }


        -----------------------------------------------------------------------------------------------------

        So you need to add <Template> in order it not throw an error