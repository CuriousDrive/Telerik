@page "/publishers"
@using BookStores.Services
@using BookStores.Models
@inject HttpClient _httpClient

<div class="col-12">
    <h3><b>Enter Publisher Information</b></h3>
    <hr />
    <div class="col-12 row">
        <label class="col-3 font-weight-bold">Publisher Name :</label>
        <input class="form-control col-4" @bind="publisher.PublisherName" placeholder="publisher's name" />
    </div>
    <br />
    <div class="col-12 row">
        <label class="col-3 font-weight-bold">City :</label>
        <select class="form-control col-4" @bind="publisher.City">
            @if (@Cities != null)
            {
                <option value="">select city..</option>
                @foreach (var city in Cities)
                {
                    <option value="@city">@city</option>
                }
            }
        </select>
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-3"></span>
        <input type="submit" class="form-control col-1 btn btn-primary" value="Save" @onclick="CreatePublisher" />
        <span>&nbsp;</span>
        <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" @onclick="ClearPublisher" />
    </div>
</div>
<br />
<div class="col-12">

    @if (publisherList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikListView Data="publisherList">
            <HeaderTemplate>
                <strong style="font-size:larger">Best Publishers in USA</strong>
            </HeaderTemplate>
            <Template Context="publisher">
                <div class="card text-white bg-dark">
                    <div class="row no-gutters">
                        <div class="col-md-2">
                            <img src=@($"/img/telerik.jpg") class="card-img" alt="...">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="card-title font-weight-bolder">@publisher.PublisherName</h5>
                                <p class="card-subtitle">@publisher.City , @publisher.State</p>
                                <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                            </div>
                        </div>
                    </div>
                </div>
            </Template>
            <FooterTemplate>
                <strong style="font-size:larger">Total Count : @publisherList.Count()</strong>
            </FooterTemplate>
        </TelerikListView>
    }
</div>

@code {

    public Publisher publisher { get; set; }
    public List<Publisher> publisherList { get; set; } = new List<Publisher>();
    public string[] Cities { get; set; }


    protected async override Task OnInitializedAsync()
    {
        publisher = new Publisher();
        Cities = new string[] { "Boston", "Washington", "Berkeley", "Chicago", "Dallas", "New York", "Portland", "Naperville", "Nashville" };

        await LoadPublishers();
    }

    private async Task LoadPublishers()
    {
        publisherList = await _httpClient.GetFromJsonAsync<List<Publisher>>("publishers/getpublishers");

        if (publisherList != null)
            publisherList = publisherList.OrderByDescending(pub => pub.PubId).ToList();

        publisher = new Publisher();

        StateHasChanged();
    }

    private async Task CreatePublisher()
    {
        await _httpClient.PostAsJsonAsync<Publisher>("publishers/createpublisher", publisher);

        await LoadPublishers();
    }

    private async Task DeletePublisher(int id)
    {
        await _httpClient.DeleteAsync("publishers/deletepublisher/" + id);

        await LoadPublishers();
    }

    private async Task UpdatePublisher()
    {
        await _httpClient.PutAsJsonAsync<Publisher>("publishers/UpdatePublisher/", publisher);

        await LoadPublishers();
    }

    private void ClearPublisher()
    {
        publisher = new Publisher();
    }

}
