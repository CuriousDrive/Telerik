@page "/authors"
@using BookStores.Models
@using BookStores.Services
@inject IBookStoresService<Author> bookStoresService
@inject IJSRuntime JSRuntime

<div class="col-12">

    <h3><b>Authors</b></h3>

    @if (authorList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikGrid Data="@authorList" Page="10"
                     OnCreate="CreateAuthor"
                     OnUpdate="UpdateAuthor"
                     OnDelete="DeleteAuthor"
                     Pageable="true">
            <GridColumns>
                <GridColumn Field="@nameof(Author.FirstName)" Title="First Name"></GridColumn>
                <GridColumn Field="@nameof(Author.LastName)" Title="Last Name"></GridColumn>
                <GridColumn Field="@nameof(Author.City)" Title="City"></GridColumn>
                <GridColumn Field="@nameof(Author.EmailAddress)" Title="Email Address"></GridColumn>
            </GridColumns>
        </TelerikGrid>
    }

</div>

@code {

    public Author author { get; set; }
    public List<Author> authorList { get; set; }
    public List<Author> filteredAuthorList { get; set; }
    public string SelectedCity { get; set; }


    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        author = new Author();
        authorList = new List<Author>();

        Cities = new string[] { "New York", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville", "Fort Worth", "Columbus", "San Francisco", "Charlotte", "Indianapolis", "Seattle", "Denver", "Washington" };

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadAuthors();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadAuthors()
    {
        //await Task.Delay(500);

        authorList = filteredAuthorList = await bookStoresService.GetAllAsync("authors/GetAuthors");

        if (authorList != null)
            authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private async Task CreateAuthor()
    {
        author.City = SelectedCity;

        await bookStoresService.SaveAsync("authors/CreateAuthor", author);

        await LoadAuthors();
    }

    private async Task UpdateAuthor()    
    {

        await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthors();
    }

    private async Task DeleteAuthor()
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", 0);
        await LoadAuthors();
    }

}