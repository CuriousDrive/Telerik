@page "/documentprocessing/pdfprocessing/mergesplit"

@using System.IO;
@using Telerik.Windows.Documents.Fixed.Model;
@using System;
@using Telerik.Windows.Documents.Fixed.FormatProviders.Pdf.Streaming;
@using Telerik.Windows.Documents.Fixed.Model.ColorSpaces;
@using Telerik.Windows.Documents.Fixed.Model.Editing;
@using Telerik.Zip;
@using Telerik.Documents.Primitives;
@using BookStores.Client.Models.DocumentProcessing
@inject HttpClient _httpClient
@inject IJSRuntime JsRuntime

<div class="demo-section">
    <h4 class="mt-0">Upload Files:</h4>
    <FileSelector ID="uploadInput1" Accept=".pdf" @bind-FileDetails="file1Details" />

    <div style='@customInputStyle'>
        <FileSelector ID="uploadInput2" Accept=".pdf" @bind-FileDetails="file2Details" />
    </div>

    <h4 class="mt-lg">Choose Action:</h4>
    <div class="list-container">
        <ul>
            @foreach (string rbValue in actions)
            {
                <li>
                    <input id="rb+@rbValue" class="k-radio" name="rb" type="radio"
                           checked="@(rbValue == rb)" @onchange="@(() => { rb = rbValue; })">
                    <label for="rb+@rbValue">@rbValue</label>
                    <img src='@(@"img/pdfprocessing/"+rbValue.Split(" ")[0].ToLowerInvariant()+".png")' />
                </li>
            }
        </ul>
    </div>
    <hr class="k-hr">
    <TelerikButton Icon="save" Primary="true" OnClick="@DownloadHandler" Class="demo-button"
                   Enabled="@isButtonEnabled">
        Generate and Download
    </TelerikButton>
</div>

@code {
    string rb = "Merge Pages";
    string[] actions = new string[] { "Merge Pages", "Split Pages", "Append Content To Pages", "Prepend Content To Pages" };
    FileDetails file1Details = new FileDetails();
    FileDetails file2Details = new FileDetails();
    string customInputStyle => rb == "Merge Pages" ? "display: block;" : "display: none;";
    bool isButtonEnabled => (rb == "Merge Pages" && file1Details.Data != null && file2Details.Data != null) || (rb != "Merge Pages" && file1Details.Data != null);

    async void DownloadHandler()
    {
        byte[] fileData = await GenerateFile();
        string type = rb == "Split Pages" ? "zip" : "pdf";
        FileExporter.Save(JsRuntime, fileData, "application/" + type, $"TelerikPdfProcessing-{rb.Replace(" ", "")}.{type}");
    }

    async Task<byte[]> GenerateFile()
    {
        if (rb == "Merge Pages" && file1Details.Data != null && file2Details.Data != null)
        {
            byte[] renderedBytes = null;
            short filesToMurge = 2;
            MemoryStream ms = new MemoryStream();

            using (PdfStreamWriter fileWriter = new PdfStreamWriter(ms, true))
            {
                for (int i = 0; i < filesToMurge; i++)
                {
                    if (i == 0)
                    {
                        using (MemoryStream stream = new MemoryStream(file1Details.Data))
                        {
                            using (PdfFileSource fileSource = new PdfFileSource(stream))
                            {
                                foreach (PdfPageSource pageSource in fileSource.Pages)
                                {
                                    fileWriter.WritePage(pageSource);
                                }
                            }
                        }
                    }
                    if (i == 1)
                    {
                        using (MemoryStream stream = new MemoryStream(file2Details.Data))
                        {
                            using (PdfFileSource fileSource = new PdfFileSource(stream))
                            {
                                foreach (PdfPageSource pageSource in fileSource.Pages)
                                {
                                    fileWriter.WritePage(pageSource);
                                }
                            }
                        }
                    }

                }
            }
            renderedBytes = ms.ToArray();
            return renderedBytes;
        }

        if (rb == "Split Pages" && file1Details.Data != null)
        {
            byte[] renderedBytes = null;
            MemoryStream ms = new MemoryStream();
            MemoryStream ms1 = new MemoryStream();

            using (MemoryStream stream0 = new MemoryStream(file1Details.Data))
            {
                using (PdfFileSource fileSource = new PdfFileSource(stream0))
                {
                    using (Stream stream = ms1)
                    {
                        using (ZipArchive archive = new ZipArchive(stream, ZipArchiveMode.Create, false, null))
                        {
                            for (int i = 0; i < fileSource.Pages.Length; i++)
                            {
                                using (PdfStreamWriter fileWriter = new PdfStreamWriter(ms, true))
                                {
                                    using (ZipArchiveEntry entry = archive.CreateEntry(i + 1 + "page.pdf"))
                                    {
                                        PdfStreamWriter writer = new PdfStreamWriter(entry.Open());
                                        PdfPageSource pageSource = fileSource.Pages[i];
                                        writer.WritePage(pageSource);
                                        writer.Dispose();
                                    }
                                }
                            }
                        }
                    }
                }
                renderedBytes = ms1.ToArray();
                return renderedBytes;
            }
        }
        if (rb == "Append Content To Pages" && file1Details.Data != null)
        {
            RadFixedPage foregroundContentOwner = GenerateForegroundTextContent("STAMP");
            MemoryStream ms = new MemoryStream();
            byte[] renderedBytes = null;
            using (MemoryStream stream = new MemoryStream(file1Details.Data))
            {
                using (PdfFileSource fileSource = new PdfFileSource(stream))
                {
                    using (PdfStreamWriter fileWriter = new PdfStreamWriter(ms, true))
                    {
                        foreach (PdfPageSource pageSource in fileSource.Pages)
                        {
                            using (PdfPageStreamWriter pageWriter = fileWriter.BeginPage(pageSource.Size, pageSource.Rotation))
                            {
                                pageWriter.WriteContent(pageSource);

                                using (pageWriter.SaveContentPosition())
                                {
                                    double xCenteringTranslation = (pageSource.Size.Width - foregroundContentOwner.Size.Width) / 2;
                                    double yCenteringTranslation = (pageSource.Size.Height - foregroundContentOwner.Size.Height) / 2;
                                    pageWriter.ContentPosition.Translate(xCenteringTranslation, yCenteringTranslation);
                                    pageWriter.WriteContent(foregroundContentOwner);
                                }
                            }
                        }
                    }
                }
            }
            renderedBytes = ms.ToArray();
            return renderedBytes;
        }

        if (rb == "Prepend Content To Pages" && file1Details.Data != null)
        {
            byte[] renderedBytes = null;
            MemoryStream ms = new MemoryStream();
            byte[] byteArray = await _httpClient.GetByteArrayAsync("DocumentProcessing/GetTemplate").ConfigureAwait(false);

            Stream streamSource = new MemoryStream(byteArray);

            using (PdfStreamWriter fileWriter = new PdfStreamWriter(ms, true))
            {
                using (MemoryStream stream = new MemoryStream(file1Details.Data))
                {
                    using (PdfFileSource fileSource = new PdfFileSource(stream))
                    {
                        using (PdfFileSource templateSource = new PdfFileSource(streamSource, true))
                        {
                            PdfPageSource backgroundTemplate = templateSource.Pages[0];

                            foreach (PdfPageSource pageSource in fileSource.Pages)
                            {
                                using (PdfPageStreamWriter pageWriter = fileWriter.BeginPage(pageSource.Size, pageSource.Rotation))
                                {
                                    using (pageWriter.SaveContentPosition())
                                    {
                                        double scaleX = pageSource.Size.Width / backgroundTemplate.Size.Width;
                                        double scaleY = pageSource.Size.Height / backgroundTemplate.Size.Height;
                                        double scale = Math.Min(scaleX, scaleY);
                                        double xCenteringTranslation = (pageSource.Size.Width - scale * backgroundTemplate.Size.Width) / 2;
                                        double yCenteringTranslation = (pageSource.Size.Height - scale * backgroundTemplate.Size.Height) / 2;
                                        pageWriter.ContentPosition.Translate(xCenteringTranslation, yCenteringTranslation);
                                        pageWriter.ContentPosition.Scale(scale, scale);
                                        pageWriter.WriteContent(backgroundTemplate);
                                    }

                                    pageWriter.WriteContent(pageSource);
                                }
                            }
                        }
                    }
                }
            }
            renderedBytes = ms.ToArray();
            return renderedBytes;
        }
        return null;
    }

    RadFixedPage GenerateForegroundTextContent(string text)
    {
        Block block = new Block();
        block.BackgroundColor = new RgbColor(50, 0, 0, 0);
        block.GraphicProperties.FillColor = new RgbColor(255, 0, 0);
        block.TextProperties.FontSize = 120;
        block.InsertText(text);
        Size horizontalTextSize = block.Measure();
        double rotatedTextSquareSize = (horizontalTextSize.Width + horizontalTextSize.Height) / Math.Sqrt(2);

        RadFixedPage foregroundContentOwner = new RadFixedPage();
        foregroundContentOwner.Size = new Size(rotatedTextSquareSize, rotatedTextSquareSize);
        FixedContentEditor foregroundEditor = new FixedContentEditor(foregroundContentOwner);
        foregroundEditor.Position.Translate(horizontalTextSize.Height / Math.Sqrt(2), 0);
        foregroundEditor.Position.Rotate(45);
        foregroundEditor.DrawBlock(block);

        return foregroundContentOwner;
    }
}

<style>
    .demo-button {
        width: 240px;
        float: right;
    }

    .list-container ul {
        list-style: none;
        padding: 0;
    }

    .list-container li {
        margin: 5px;
        height: 80px;
    }

    .list-container img {
        float: right;
        width: 80px;
        height: 80px;
    }

    .list-container label {
        margin-top: 30px;
    }

    .list-container li > input[type=radio] {
        margin: -2px 3px 0 0;
    }
</style>