@page "/exportdatatofiles"

@using System;
@using System.IO;
@using System.Linq;
@using System.Collections
@using DocumentProcessing.Utilities
@using DocumentProcessing.Models
@using DocumentProcessing.Repositories
@using System.Collections.Generic;
@inject IJSRuntime JsRuntime
@inject IJSRuntime JsRuntime

<div class="demo-container mb-md">
    <div class="col-12">
        <label class="demo-spacing">File extension:</label>
        <TelerikDropDownList Data="@Formats" @bind-Value="@SelectedFormat" PopupHeight="" Width="140px" />

        <TelerikButton Icon="save" Primary="true" OnClick="@ExportHandler"
                       Class="demo-spacing demo-button">Generate</TelerikButton>
    </div>

</div>
<br />
<div class="col-12">

    @if (BookList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikGrid Data="BookList"
                     Pageable="true"
                     PageSize="10">
            <GridColumns>
                <GridColumn Field="@nameof(Book.Title)"></GridColumn>
                <GridColumn Field="@nameof(Book.AuthorName)" Title="Author Name"></GridColumn>
                <GridColumn Field="@nameof(Book.Type)">
                </GridColumn>
                <GridColumn Field="@nameof(Book.Price)">
                    <Template>
                        @((context as Book).Price.ToString("C2"))
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Book.Sales)" Groupable="false">
                    <Template>
                        @((context as Book).Sales.ToString("N0"))
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    }
    <br /><br />
</div>

@code {

    //properties

    public List<Book> BookList { get; set; }

    Hashtable table = new Hashtable();
    string SelectedFormat = "XLSX";
    string[] Formats = { "XLSX", "CSV", "TXT", "PDF" };


    protected override async Task OnInitializedAsync()
    {
        BookList = new BookStoresRepository().GetBooks();

        await base.OnInitializedAsync();
    }

    void ExportHandler()
    {

    }   

    string GetMimeType()
    {
        string mimeType = String.Empty;
        switch ("." + SelectedFormat.ToLowerInvariant())
        {
            case ".xlsx": mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"; break;
            case ".pdf": mimeType = "application/pdf"; break;
            case ".txt": mimeType = "text/plain"; break;
            case ".csv": mimeType = "text/csv"; break;
        }
        return mimeType;
    }

}

<style>
    .demo-button {
        width: 140px;
    }
</style>