#pragma checksum "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\Pages\Authors.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "53623d7ce1be7cc02a39e5b81a69062443884891"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BookStores.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using BookStores.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using BookStores.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\_Imports.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\Pages\Authors.razor"
using BookStores.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\Pages\Authors.razor"
using BookStores.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Authors : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 87 "c:\Data\CuriousDrive\GitHub Repos\Telerik\Episode 1\BookStores\Client\Pages\Authors.razor"
       

    public Author author { get; set; }
    public List<Author> authorList { get; set; }
    public List<Author> filteredAuthorList { get; set; }
    public string SelectedCity { get; set; }


    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        author = new Author();
        authorList = new List<Author>();
        //authorList = await authorService.GetAuthors();

        Cities = new string[] { "New York", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville", "Fort Worth", "Columbus", "San Francisco", "Charlotte", "Indianapolis", "Seattle", "Denver", "Washington" };

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadAuthors();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadAuthors()
    {
        await Task.Delay(500);

        authorList = filteredAuthorList = await bookStoresService.GetAllAsync("authors/GetAuthors");

        //if (authorList != null)
        //    authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private async Task SaveAuthor()
    {
        author.City = SelectedCity;

        if (author.AuthorId == 0)
            await bookStoresService.SaveAsync("authors/CreateAuthor", author);
        else
            await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthors();

        Result = true;
        IsVisible = true;

        var firstName = author.FirstName;
        var lastName = author.LastName;

        RecordName = firstName + " " + lastName;

        author = new Author();

        //await JSRuntime.InvokeVoidAsync("saveMessage", firstName, lastName);
        await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstNameTextBox);
    }

    private async Task DeleteAuthor(int authorId)
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", authorId);
        await LoadAuthors();

        //throw new Exception("DeleteAuthor");
    }

    private void EditAuthor(Author argAuthor)
    {
        author = argAuthor;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnAuthorSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "AuthorId":
                filteredAuthorList = authorList.Where(auth => auth.AuthorId.ToString().Contains(searchText)).ToList();
                break;
            case "FirstName":
                filteredAuthorList = authorList.Where(auth => auth.FirstName.ToLower().Contains(searchText)).ToList();
                break;
            case "LastName":
                filteredAuthorList = authorList.Where(auth => auth.LastName.ToLower().Contains(searchText)).ToList();
                break;
            case "City":
                filteredAuthorList = authorList.Where(auth => auth.City.ToLower().Contains(searchText)).ToList();
                break;
            case "EmailAddress":
                filteredAuthorList = authorList.Where(auth => auth.EmailAddress.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBookStoresService<Author> bookStoresService { get; set; }
    }
}
#pragma warning restore 1591
