@page "/"
@using BookStores.Models
@using BookStores.Services
@inject IBookStoresService<Author> bookStoresService
@inject IJSRuntime JSRuntime

<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />
    <EditForm Model="@author" OnValidSubmit="@CreateAuthor">
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">First Name :</label>
            <input class="form-control col-4" @bind="author.FirstName" placeholder="first name" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Last Name :</label>
            <input class="form-control col-4" @bind="author.LastName" placeholder="last name" />           
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">City :</label>
            <select class="form-control col-4" @bind="author.City">
                @if (@Cities != null)
                {
                    <option value="">select city..</option>
                    @foreach (var city in Cities)
                    {
                        <option value="@city">@city</option>
                    }
                }
            </select>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">State :</label>
            <select class="form-control col-4">
                @if (States != null)
                {
                    <option value="">select state..</option>
                    @foreach (var state in States)
                    {
                        <option value="@state">@state</option>
                    }
                }
            </select>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Book Types :</label>
            <select class="form-control col-4">
                @if (BookTypes != null)
                {
                    <option value="">select book type..</option>
                    @foreach (var bookType in BookTypes)
                    {
                        <option value="@bookType">@bookType.Type</option>
                    }
                }
            </select>
            <br />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Subscriptions :</label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">All</label>
        </div>
        <div class="col-12 row">
            <label class="col-3 font-weight-bold"></label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">Gold</label>            
        </div>
        <div class="col-12 row">
            <label class="col-3 font-weight-bold"></label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">Silver</label>
        </div>        
        <div class="col-12 row">
            <label class="col-3 font-weight-bold"></label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">Bronze</label>
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-3"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>
    </EditForm>
</div>
<br />
<div class="col-12">
    <h3><b>Authors</b></h3>

    @if (authorList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>City</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in authorList)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>@author.City</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    public Author author { get; set; }
    public List<Author> authorList { get; set; }

    public string[] Cities { get; set; } =
        new string[] { "New York City", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia",
                    "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville",
                    "Fort Worth", "Columbus", "San Francisco", "Charlotte", "Indianapolis", "Seattle",
                    "Denver" };

    public string[] States { get; set; } =
        new string[] { "NY", "CA", "IL", "AZ", "PA", "OH", "NC", "IN", "WA", "CO", "TX", "FL" };

    public List<BookType> BookTypes = new List<BookType>();    

    protected override async Task OnInitializedAsync()
    {
        author = new Author();
        authorList = new List<Author>();
        await LoadAuthors();

        //loading book types
        BookTypes.Add(new BookType { Id = 1, Type = "Fiction" });
        BookTypes.Add(new BookType { Id = 2, Type = "Non-Fiction" });

        await base.OnInitializedAsync();
    }

    private async Task LoadAuthors()
    {
        authorList = await bookStoresService.GetAllAsync("authors/GetAuthors");

        if (authorList != null)
            authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private async Task CreateAuthor()
    {
        if (author.AuthorId == 0)
            await bookStoresService.SaveAsync("authors/CreateAuthor", author);

        await LoadAuthors();

        author = new Author();
    }

    private async Task UpdateAuthor()
    {
        if(author.AuthorId != 0)
            await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthors();

        author = new Author();
    }

    private async Task DeleteAuthor(int authorId)
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", authorId);
        await LoadAuthors();
    }

}