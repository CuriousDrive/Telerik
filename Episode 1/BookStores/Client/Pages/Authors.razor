@page "/"
@using BookStores.Models
@using BookStores.Services
@inject IBookStoresService<Author> bookStoresService
@inject IJSRuntime JSRuntime

<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />

    <EditForm Model="@author" OnValidSubmit="@SaveAuthor">
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">first name :</label>
            <InputText class="form-control col-6" @bind-Value="author.FirstName" placeholder="first name" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">last name :</label>
            <InputText class="form-control col-6" @bind-Value="author.LastName" placeholder="last name" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">city :</label>
            <select class="form-control col-6">
                @if (@Cities != null)
                {
                    <option value="">select city..</option>
                    @foreach (var city in Cities)
                    {
                        <option value="@city">@city</option>
                    }
                }
            </select>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">state :</label>
            <select class="form-control col-6">
                @if (States != null)
                {
                    <option value="">select state..</option>
                    @foreach (var state in States)
                    {
                        <option value="@state">@state</option>
                    }
                }
            </select>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Book Types :</label>
            <select class="form-control col-6">
                @if (BookTypes != null)
                {
                    <option value="">select book type..</option>
                    @foreach (var bookType in BookTypes)
                    {
                        <option value="@bookType">@bookType</option>
                    }
                }
            </select>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Subscriptions :</label>

            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-2 font-weight-bold">All</label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-2 font-weight-bold">Tier 1</label>
            <span>&nbsp;</span>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-2 font-weight-bold">Tier 2</label>
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-3"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>
    </EditForm>
</div>
<br />
<div class="col-12">

    <h3><b>Authors</b></h3>

    @if (authorList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>FirstName</th>
                    <th>LastName</th>
                    <th>City</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in authorList)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>@author.City</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    public Author author { get; set; }
    public List<Author> authorList { get; set; }
    public string SelectedCity { get; set; }

    public string[] Cities { get; set; } =
    new string[] { "New York City", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia",
                    "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville",
                    "Fort Worth", "Columbus", "San Francisco", "Charlotte", "Indianapolis", "Seattle",
                    "Denver" };

    public string[] States { get; set; } = new string[] { "NY", "CA", "IL", "AZ", "PA","OH", "NC", "IN", "WA","CO" };

    public string[] BookTypes { get; set; } = new string[] { "Fiction", "Nonfiction" };

    protected override async Task OnInitializedAsync()
    {
        author = new Author();
        authorList = new List<Author>();
        await LoadAuthors();

        await base.OnInitializedAsync();
    }

    private async Task LoadAuthors()
    {
        authorList = await bookStoresService.GetAllAsync("authors/GetAuthors");

        if (authorList != null)
            authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private async Task SaveAuthor()
    {
        author.City = SelectedCity;

        if (author.AuthorId == 0)
            await bookStoresService.SaveAsync("authors/CreateAuthor", author);
        else
            await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthors();

        author = new Author();
    }

    private async Task DeleteAuthor(int authorId)
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", authorId);
        await LoadAuthors();
    }

    private void EditAuthor(Author argAuthor)
    {
        author = argAuthor;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

}