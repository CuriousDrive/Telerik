@page "/"
@using BookStores.Models
@using BookStores.Services
@inject IBookStoresService<Author> bookStoresService
@inject IJSRuntime JSRuntime

    <div class="col-12">
        <h3><b>Enter Author Information</b></h3>
        <hr />
        
        @*<EditForm Model="@author" OnValidSubmit="@SaveAuthor">*@
            <div class="col-12 row">
                <label class="col-3 font-weight-bold">first name :</label>
                @*<InputText class="form-control col-6" @bind-Value="author.FirstName" placeholder="first name" />*@
                <TelerikTextBox Id="txtFirstName"
                            Enabled="true"
                            @bind-Value="author.FirstName"
                            Class="form-control col-6"></TelerikTextBox>
            </div>
            <br />
            <div class="col-12 row">
                <label class="col-3 font-weight-bold">last name :</label>
                @*<InputText class="form-control col-6" @bind-Value="author.LastName" placeholder="last name" />*@
                <TelerikTextBox Id="txtLastName"
                                Enabled="true"
                                @bind-Value="author.LastName"
                                Class="form-control col-6"></TelerikTextBox>
            </div>
            <br />
            <div class="col-12 row">
                <label class="col-3 font-weight-bold">city :</label>
                @*<select class="form-control col-6">
                    @if (@Cities != null)
                    {
                        <option value="">select city..</option>
                        @foreach (var city in Cities)
                        {
                            <option value="@city">@city</option>
                        }
                    }
                </select>*@
                <TelerikDropDownList Id="ddCity"                                     
                                     @bind-Value="author.City"
                                     Data="Cities"
                                     Class="form-control col-6">
                    <HeaderTemplate>
                        <div class="font-weight-bolder">Header</div>
                    </HeaderTemplate>
                    <FooterTemplate>
                        <div class="font-weight-bolder">Footer</div>
                    </FooterTemplate>
                    <ValueTemplate>
                        <div>@((context as string))</div>
                    </ValueTemplate>
                    <ItemTemplate>
                        <div>@((context as string) + " - " + GetStateFromCity(context))</div>
                    </ItemTemplate>
                </TelerikDropDownList>
                @*<span class="col-2 font-weight-bolder">&nbsp;@SelectedState</span>*@
            </div>
            <br />
            <div class="col-12 row">
                <label class="col-3 font-weight-bold">Book Types :</label>
                <select class="form-control col-6">
                    @if (BookTypes != null)
                    {
                        <option value="">select book type..</option>
                        @foreach (var bookType in BookTypes)
                        {
                            <option value="@bookType">@bookType</option>
                        }
                    }
                </select>
            </div>
            <br />
            <div class="col-12 row">
                <label class="col-3 font-weight-bold">Subscriptions :</label>

                <input type="checkbox" />
                <span>&nbsp;</span>
                <label class="col-2 font-weight-bold">All</label>
                <input type="checkbox" />
                <span>&nbsp;</span>
                <label class="col-2 font-weight-bold">Tier 1</label>
                <span>&nbsp;</span>
                <input type="checkbox" />
                <span>&nbsp;</span>
                <label class="col-2 font-weight-bold">Tier 2</label>
            </div>
            <br />
            <div class="col-12 row">
                <span class="col-3"></span>
                <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
                <span>&nbsp;</span>
                <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
            </div>
        @*</EditForm>*@
    </div>
<br />
<div class="col-12">

    <h3><b>Authors</b></h3>

    @if (authorList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>FirstName</th>
                    <th>LastName</th>
                    <th>City</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in authorList)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>@author.City</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    public Author author { get; set; }
    public List<Author> authorList { get; set; }
    public string SelectedState { get; set; }

    public string[] Cities { get; set; } =
        new string[] { "New York City", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia",
                    "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville",
                    "Fort Worth", "Columbus", "San Francisco", "Charlotte", "Indianapolis", "Seattle",
                    "Denver" };

    public string[] States { get; set; } =
        new string[] { "NY", "CA", "IL", "AZ", "PA", "OH", "NC", "IN", "WA", "CO", "TX", "FL" };

    public string[] BookTypes { get; set; } =
        new string[] { "Fiction", "Nonfiction" };

    protected override async Task OnInitializedAsync()
    {
        author = new Author();
        authorList = new List<Author>();
        await LoadAuthors();

        await base.OnInitializedAsync();
    }

    private async Task LoadAuthors()
    {
        authorList = await bookStoresService.GetAllAsync("authors/GetAuthors");

        if (authorList != null)
            authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private async Task SaveAuthor()
    {

        if (author.AuthorId == 0)
            await bookStoresService.SaveAsync("authors/CreateAuthor", author);
        else
            await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthors();

        author = new Author();
    }

    private async Task DeleteAuthor(int authorId)
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", authorId);
        await LoadAuthors();
    }

    private void EditAuthor(Author argAuthor)
    {
        author = argAuthor;
    }

    private void OnSelectCity(string city)
    {
        author.City = city;
        SelectedState = GetStateFromCity(city);
    }

    private string GetStateFromCity(string city)
    {
        if (city == "New York City")
            return "NY";
        if (city == "Los Angeles" || city == "San Diego" || city == "San Jose" || city == "San Francisco")
            return "CA";
        if (city == "San Antonio" || city == "Houston" || city == "Dallas" || city == "Austin" || city == "Fort Worth")
            return "TX";
        if (city == "Chicago")
            return "IL";
        if (city == "Phoenix")
            return "AZ";
        if (city == "Philadelphia")
            return "PA";
        if (city == "Jacksonville")
            return "FL";
        if (city == "Columbus")
            return "OH";
        if (city == "Charlotte")
            return "NC";
        if (city == "Indianapolis")
            return "IN";
        if (city == "Seattle")
            return "WA";
        if (city == "Denver")
            return "CO";

        return "";
    }
}