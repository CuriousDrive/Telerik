@page "/"
@using BookStores.Models
@using BookStores.Services
@inject IBookStoresService<Author> bookStoresService
@inject IJSRuntime JSRuntime

<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />
    <EditForm Model="@author" OnValidSubmit="@CreateAuthor">
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">First Name :</label>
            <TelerikTextBox Id="txtFirstName"
                            Class="form-control col-4"
                            ValueExpression="@(() => author.FirstName)"
                            Enabled="@(SetTextBoxAccess())"
                            ValueChanged="@((string value) => TextBoxEventHandler(value))"></TelerikTextBox>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Last Name :</label>
            <TelerikTextBox Id="txtFirstName"
                            Class="form-control col-4"
                            @bind-Value="author.LastName"></TelerikTextBox>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">City :</label>
            @if (Cities.Count() > 0)
            {
                <TelerikAutoComplete Id="acCities"
                                     Class="form-control col-4"
                                     @bind-Value="author.City"
                                     Data="Cities"
                                     ValueField="@nameof(City.CityName)"
                                     Filterable="true"
                                     MinLength="2"
                                     FilterOperator="StringFilterOperator"
                                     Placeholder="please select city..."
                                     ClearButton="false"
                                     OnChange="DropDownListEventHandler">
                    <HeaderTemplate>
                        <strong>Top Cities</strong>
                    </HeaderTemplate>
                    <FooterTemplate>
                        <strong>Total : @Cities.Count()</strong>
                    </FooterTemplate>
                    <ItemTemplate Context="city">
                        @city.CityName, @GetStateFromCity(city.CityName)
                    </ItemTemplate>
                </TelerikAutoComplete>
            }
        </div>
        <br />        
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">State :</label>
            @if (States.Length > 0)
            {
                <TelerikDropDownList Id="ddlStates"
                                     Class="form-control col-4"
                                     @bind-Value="author.State"
                                     Data="States"></TelerikDropDownList>
            }
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Book Types :</label>
            <select class="form-control col-4">
                @if (BookTypes != null)
                {
                    <option value="">select book type..</option>
                    @foreach (var bookType in BookTypes)
                    {
                        <option value="@bookType">@bookType.Type</option>
                    }
                }
            </select>
            <br />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-3 font-weight-bold">Subscriptions :</label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">All</label>
        </div>
        <div class="col-12 row">
            <label class="col-3 font-weight-bold"></label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">Gold</label>
        </div>
        <div class="col-12 row">
            <label class="col-3 font-weight-bold"></label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">Silver</label>
        </div>
        <div class="col-12 row">
            <label class="col-3 font-weight-bold"></label>
            <input type="checkbox" />
            <span>&nbsp;</span>
            <label class="col-4">Bronze</label>
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-3"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>
    </EditForm>
</div>
<br />
<div class="col-12">
    <h3><b>Authors</b></h3>

    @if (authorList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>City</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in authorList)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>@author.City</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    //properties
    public Author author { get; set; }
    public List<Author> authorList { get; set; }

    public List<BookType> BookTypes = new List<BookType>();
    public List<City> Cities { get; set; } = new List<City>();

    public string[] States { get; set; } =
        new string[] { "NY", "CA", "IL", "AZ", "PA", "OH", "NC", "IN", "WA", "CO", "TX", "FL" };

    public string TextBoxValue { get; set; }
    public string DropDownListValue { get; set; }

    Telerik.Blazor.StringFilterOperator StringFilterOperator { get; set; } = StringFilterOperator.Contains;

    //methods

    private bool SetTextBoxAccess()
    {
        return true;
    }

    private void TextBoxEventHandler(string value)
    {
        author.FirstName = value;
        TextBoxValue = value;
    }

    private void DropDownListEventHandler(object value)
    {
        DropDownListValue = (string)value;
        //string selectedCity = Cities.Where(ct => ct.Id == DropDownListValue).FirstOrDefault().CityName;
        author.State = GetStateFromCity(DropDownListValue);
        //author.City = selectedCity;
    }

    protected override async Task OnInitializedAsync()
    {
        author = new Author();
        authorList = new List<Author>();
        await LoadAuthors();

        //loading dropdownlist
        LoadCities();

        LoadBookTypes();

        await base.OnInitializedAsync();
    }

    private async Task LoadAuthors()
    {
        authorList = await bookStoresService.GetAllAsync("authors/GetAuthors");

        if (authorList != null)
            authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();
    }

    private void LoadCities()
    {
        Cities.Add(new City { Id = "1", CityName = "New York City" });
        Cities.Add(new City { Id = "2", CityName = "Los Angeles" });
        Cities.Add(new City { Id = "3", CityName = "Chicago" });
        Cities.Add(new City { Id = "4", CityName = "Houston" });
        Cities.Add(new City { Id = "5", CityName = "Phoenix" });
        Cities.Add(new City { Id = "6", CityName = "Philadelphia" });
        Cities.Add(new City { Id = "7", CityName = "San Antonio" });
        Cities.Add(new City { Id = "8", CityName = "San Diego" });
        Cities.Add(new City { Id = "9", CityName = "Dallas" });
        Cities.Add(new City { Id = "10", CityName = "San Jose" });
        Cities.Add(new City { Id = "11", CityName = "Austin" });
        Cities.Add(new City { Id = "12", CityName = "Jacksonville" });
        Cities.Add(new City { Id = "13", CityName = "Fort Worth" });
        Cities.Add(new City { Id = "14", CityName = "Columbus" });
        Cities.Add(new City { Id = "15", CityName = "San Francisco" });
        Cities.Add(new City { Id = "16", CityName = "Charlotte" });
        Cities.Add(new City { Id = "17", CityName = "Indianapolis" });
        Cities.Add(new City { Id = "18", CityName = "Seattle" });
        Cities.Add(new City { Id = "19", CityName = "Denver" });
    }

    private void LoadBookTypes()
    {
        //loading book types
        BookTypes.Add(new BookType { Id = 1, Type = "Fiction" });
        BookTypes.Add(new BookType { Id = 2, Type = "Non-Fiction" });
    }

    private async Task CreateAuthor()
    {
        if (author.AuthorId == 0)
            await bookStoresService.SaveAsync("authors/CreateAuthor", author);

        await LoadAuthors();

        author = new Author();
    }

    private async Task UpdateAuthor()
    {
        if (author.AuthorId != 0)
            await bookStoresService.UpdateAsync("authors/UpdateAuthor", author.AuthorId, author);

        await LoadAuthors();

        author = new Author();
    }

    private async Task DeleteAuthor(int authorId)
    {
        await bookStoresService.DeleteAsync("authors/DeleteAuthor/", authorId);
        await LoadAuthors();
    }

    private string GetStateFromCity(string city)
    {
        if (city == "New York City")
            return "NY";
        if (city == "Los Angeles" || city == "San Diego" || city == "San Jose" || city == "San Francisco")
            return "CA";
        if (city == "San Antonio" || city == "Houston" || city == "Dallas" || city == "Austin" || city == "Fort Worth")
            return "TX";
        if (city == "Chicago")
            return "IL";
        if (city == "Phoenix")
            return "AZ";
        if (city == "Philadelphia")
            return "PA";
        if (city == "Jacksonville")
            return "FL";
        if (city == "Columbus")
            return "OH";
        if (city == "Charlotte")
            return "NC";
        if (city == "Indianapolis")
            return "IN";
        if (city == "Seattle")
            return "WA";
        if (city == "Denver")
            return "CO";

        return "";
    }
}