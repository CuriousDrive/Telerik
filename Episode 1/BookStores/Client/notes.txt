So I am going to start of without EditForm. At the end when getting ready show forms and validations 
Sent an email to Ed to figure out how can I used ValueChanged event in the EditForm

Telerik Textboxes - 
	CSS is the same. you can assign "form-control col-6"
	It is easier to set disabled 
	You can assign Value and @bind-value

	        <TelerikTextBox Id="txtFirstName"
                            Class="form-control col-6"
                            Enabled="true"
                            @bind-Value="author.FirstName"></TelerikTextBox>

Telerik Dropdownlist - 
	I am going to try and show cascade loading for city and state
	I used the templates and came up with this code
    DefaultText is something that I did 
	        
            <TelerikDropDownList Id="ddCity"
                                 Class="form-control col-6"
                                 Data="Cities"
                                 DefaultText = "Please select city.."
                                 ValueChanged="@((string value) => OnSelectCity(value))">
                <HeaderTemplate><div class="font-weight-bolder">Header</div></HeaderTemplate>
                <FooterTemplate><div class="font-weight-bolder">Footer</div></FooterTemplate>
                <ValueTemplate>
                    <div>@(context as string)</div>
                </ValueTemplate>
                <ItemTemplate>
                    <div>@((context as string) + ", " + GetStateFromCity(context))</div>
                </ItemTemplate>
            </TelerikDropDownList>

Telerik AutoComplete - 
	For this I am going to use same city and state example
    TelerikAutoComplete is almost like dropdonw list
    Make sure to use placeholder for this control instead of using Default Text
    Filterable, FilterOperator, MinLength, Placeholder, ClearButton

            <TelerikAutoComplete Id="acCity"
                                 Class="form-control col-6"
                                 Data="@Cities"
                                 Placeholder="please select city..."                                 
                                 ValueChanged="@((string value) => OnSelectCity(value))">
            </TelerikAutoComplete>


Telerik Multiselect - 
    Very interesting setup here. I was struggling with an error for like an hour
    the @bind-value should be of List<int> assuming your ValueField is an int
    Also it does not stop giving error until you mention below fields
    Data, @bind-value, ValueField and TextField
    It did not work until I put the not null condition on top of it
    I am also going to show how you can handle OnChange event and show what has been selected in the multiselect
    Filtering might get little tricky

        @if (BookTypes != null && BookTypes.Count() > 0)
        {
            <TelerikMultiSelect Data="@BookTypes"
                                @bind-Value="@SelectedBookTypesValue"
                                ValueField="@nameof(BookType.Id)"
                                TextField="@nameof(BookType.Type)"
                                OnChange="@OnMultiSelectChange"
                                Placeholder="select booktype..."
                                Width="350px"
                                Id="products-multiselect" />

            @if (SelectedBookTypesText != null && SelectedBookTypesText.Count() > 0)
            {
                @foreach (string selectedText in SelectedBookTypesText)
                {
                    <strong>
                        @string.Join(",", selectedText);
                    </strong>
                }
            }
        }
        public List<int> SelectedBookTypesValue { get; set; }
        public List<string> SelectedBookTypesText { get; set; }

        private void OnMultiSelectChange()
        {
            SelectedBookTypesText = BookTypes.Where(bt => SelectedBookTypesValue.Contains(bt.Id))
                                                .Select(bt => bt.Type).ToList();
        }

        


Telerik Checkboxes - 
    Finally I am getting ready work on this component

        public List<SubscriptionType> SubscriptionTypes = new List<SubscriptionType>();
        //loading tiers 
        SubscriptionTypes.Add(new SubscriptionType { Id = 1, SubscriptionName = "Gold" });
        SubscriptionTypes.Add(new SubscriptionType { Id = 1, SubscriptionName = "Silver" });
        SubscriptionTypes.Add(new SubscriptionType { Id = 1, SubscriptionName = "Bronze" });
        

----------------------------- some extra code -------------------------------------

        C:\Data\CuriousDrive\GitHub Repos\Telerik\BookStoresWebAPI

        private void OnSelectCity(string city)
        {
            author.City = city;
            author.State = GetStateFromCity(city);
        }

        private void OnMultiSelectChange()
        {
            SelectedBookTypesText = BookTypes.Where(bt => SelectedBookTypesValue.Contains(bt.Id))
                                                .Select(bt => bt.Type).ToList();
        }

        private string GetStateFromCity(string city)
        {
            if (city == "New York City")
                return "NY";
            if (city == "Los Angeles" || city == "San Diego" || city == "San Jose" || city == "San Francisco")
                return "CA";
            if (city == "San Antonio" || city == "Houston" || city == "Dallas" || city == "Austin" || city == "Fort Worth")
                return "TX";
            if (city == "Chicago")
                return "IL";
            if (city == "Phoenix")
                return "AZ";
            if (city == "Philadelphia")
                return "PA";
            if (city == "Jacksonville")
                return "FL";
            if (city == "Columbus")
                return "OH";
            if (city == "Charlotte")
                return "NC";
            if (city == "Indianapolis")
                return "IN";
            if (city == "Seattle")
                return "WA";
            if (city == "Denver")
                return "CO";

            return "";
        }


        States.Add(new State { Id = "1", StateName = "NY" });
        States.Add(new State { Id = "2", StateName = "CA" });
        States.Add(new State { Id = "3", StateName = "IL" });
        States.Add(new State { Id = "4", StateName = "AZ" });
        States.Add(new State { Id = "5", StateName = "PA" });
        States.Add(new State { Id = "6", StateName = "OH" });
        States.Add(new State { Id = "7", StateName = "NC" });
        States.Add(new State { Id = "8", StateName = "IN" });
        States.Add(new State { Id = "9", StateName = "WA" });
        States.Add(new State { Id = "10", StateName = "CO" });
        States.Add(new State { Id = "11", StateName = "TX" });
        States.Add(new State { Id = "12", StateName = "FL" });

         @if (Cities != null && Cities.Count > 0)
            {
                <TelerikDropDownList Id="ddlCities"
                                     Class="form-control col-4"
                                     Data="@Cities"
                                     ValueExpression="@(() => author.City)"
                                     TextField="@nameof(City.CityName)"
                                     ValueField="@nameof(City.Id)"                                     
                                     ValueChanged="@((string value) => DropdownEventHandler(value))"></TelerikDropDownList>

                <div class="col-4">@DropdownListValue</div>
            }

            @if (States != null && States.Length > 0)
            {
                <TelerikDropDownList Id="ddlStates"
                                     Class="form-control col-4"
                                     Data="@States"
                                     @bind-Value="author.State"></TelerikDropDownList>
            }

            <select class="form-control col-4">
                @if (BookTypes != null)
                {
                    <option value="">select city..</option>
                    @foreach (var bookType in BookTypes)
                    {
                        <option value="@bookType.Id">@bookType.Type</option>
                    }
                }
            </select>

            <HeaderTemplate>
                        <h5>Popular cities in USA</h5>
                    </HeaderTemplate>
                    <FooterTemplate>
                        <h5>Popular cities in USA</h5>
                    </FooterTemplate>
                    <ValueTemplate Context="city">
                       @city.CityName
                    </ValueTemplate>
                    <ItemTemplate Context="city">
                        @city.CityName, @GetStateFromCity(city.CityName)
                    </ItemTemplate>


                    <TelerikDropDownList Id="ddlCities"
                                     Class="form-control col-4"
                                     ValueExpression="@(() => author.City)"
                                     TextField="@nameof(City.CityName)"
                                     ValueField="@nameof(City.Id)"
                                     Data="Cities"
                                     ValueChanged="@((string value) => DropDownListEventHandler(value))">

                    <HeaderTemplate>
                        <h5>Popular cities in USA</h5>
                    </HeaderTemplate>
                    <FooterTemplate>
                        <h5>Popular cities in USA</h5>
                    </FooterTemplate>
                    <ValueTemplate Context="city">
                        @city.CityName
                    </ValueTemplate>
                    <ItemTemplate Context="city">
                        @city.CityName, @GetStateFromCity(city.CityName)
                    </ItemTemplate>
                </TelerikDropDownList>

                <TelerikAutoComplete Id="acCities"
                                     Class="form-control col-4"
                                     @bind-Value="author.City"
                                     Data="Cities"
                                     ValueField="@nameof(City.CityName)"
                                     Filterable="true"
                                     MinLength="2"
                                     FilterOperator="StringFilterOperator"
                                     Placeholder="please select city..."
                                     ClearButton="false"
                                     OnChange="DropDownListEventHandler">
                    <HeaderTemplate>
                        <strong>Top Cities</strong>
                    </HeaderTemplate>
                    <FooterTemplate>
                        <strong>Total : @Cities.Count()</strong>
                    </FooterTemplate>
                    <ItemTemplate Context="city">
                        @city.CityName, @GetStateFromCity(city.CityName)
                    </ItemTemplate>
                </TelerikAutoComplete>
	
------------------------------------------

Data, TextField, ValueField, @bind-Value
public List<int> SelectedBookTypeIds { get; set; } = new List<int>();

Two Way Binding using SelectedBookTypesId
@if (SelectedBookTypeIds.Count() > 0)
            {
                @foreach (int selectedId in SelectedBookTypeIds)
                { 
                    @(BookTypes.Where(bt => bt.Id == selectedId).FirstOrDefault().Type) <span>,</span>
                }
            }

Placeholder, ClearButton, Filterable, FilterOperator, MinLength

OnChange, ValueChanged Event
public string Message { get; set; }
private void MultiSelectEventHandler(object value)
    {
        List<int> selectedIds = (List<int>)value;

        if (selectedIds.Count() > 3)
            Message = "more than 3 book types have been selected.";
        else
            Message = "";
    }

OnRead Event - MultiSelectReadEventArgs

Telerik.DataSource.FilterDescriptor filterDescriptor
                        = multiSelectReadEventArgs.Request.Filters[0] as Telerik.DataSource.FilterDescriptor;

        string input = filterDescriptor.Value.ToString();
        string op = filterDescriptor.Operator.ToString();

------------------------------------------

            <div class="col-12 row">
                <label class="col-3 font-weight-bold">Subscriptions :</label>
                <input type="checkbox" />
                <span>&nbsp;</span>
                <label class="col-4">All</label>
            </div>
            @if (Subscriptions.Count() > 0)
            {
                @foreach (Subscription subscription in Subscriptions)
                { 
                    <div class="col-12 row">
                        <div class="col-3"></div>
                        <label class="col-4">
                            <input type="checkbox" @bind="subscription.Selected"/>
                            @subscription.SubscriptionName
                        </label>
                        <div class="col-4">@subscription.Selected</div>
                    </div>
                }
            }
            <br />
        
            @if (Subscriptions.Count() > 0)
            {
                <div class="col-12 row">
                    <label class="col-3 font-weight-bold">Subscriptions :</label>
                    <label>
                        <TelerikCheckBox Id="cbAll"   
                                         @bind-Value="SelectAllValue"
                                         Indeterminate="SelectAllInderminateValue"></TelerikCheckBox>
                        All
                    </label>
                </div>
                @foreach (Subscription subscription in Subscriptions)
                {
                    <div class="col-12 row">
                        <div class="col-3"></div>
                        <div class="col-4">
                            <label>
                                <TelerikCheckBox Id="@("cb" + subscription.Id.ToString())"
                                                 @bind-Value="subscription.Selected"></TelerikCheckBox>
                                @subscription.SubscriptionName
                            </label>
                        </div>
                    </div>
                }
            }

            public bool SelectAllValue
            {
                get
                {
                    return Subscriptions.All(sub => sub.Selected);
                }
                set
                {
                    Subscriptions.ForEach(sub => sub.Selected = value);
                }
            }

            public bool SelectAllInderminateValue
            {
                get
                {
                    return !SelectAllValue && Subscriptions.Any(sub => sub.Selected);
                }
            }


